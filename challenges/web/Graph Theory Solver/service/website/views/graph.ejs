<!DOCTYPE html>
<html>
  <head>
    <title>Graph Theory Question Builder</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap">
    <link rel="stylesheet" href="/static/css/graph.css">
  </head>
  <body>
    <div id="app">
      <h1>Graph Theory Question Builder</h1>
      <p>Click on a cell to change its type or altitude based on the selected mode.</p>
      <p>White Cell -> Empty Space; Grey Cell -> Wall; Green Cell -> Endpoint</p>
    
      <div class="controls">
        <button id="mode-increase-altitude">Increase Altitude</button>
        <button id="mode-decrease-altitude">Decrease Altitude</button>
        <button id="mode-change-type">Change Type</button>
      </div>
      <div class="grid" id="grid"></div>
      <button id="submit">Solve!</button>
      <h3>Modified Cells:</h3>
      <ul id="modified-cells"></ul>
    </div>

    <script>
        function redirectToPost(endpoint, jsonData) {
        // Create a form element
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = endpoint;

        // Create a hidden input field to hold the JSON data
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'data';  // The key name for the JSON data
        input.value = JSON.stringify(jsonData);

        // Append the input field to the form
        form.appendChild(input);

        // Append form to the body and submit it
        document.body.appendChild(form);
        form.submit();
        }

        const path = <%- path ? JSON.stringify(path) : '[]' %>;
        
      document.addEventListener('DOMContentLoaded', () => {
        const grid = <%- graph ? JSON.stringify(graph) : 'Array(10).fill().map(() => Array(10).fill().map(() => ({ type: "empty", altitude: 0 })))' %>;

        const gridElement = document.getElementById('grid');
        const modifiedCellsElement = document.getElementById('modified-cells');
        let currentMode = 'change-type';

        const modeButtons = {
          'increase-altitude': document.getElementById('mode-increase-altitude'),
          'decrease-altitude': document.getElementById('mode-decrease-altitude'),
          'change-type': document.getElementById('mode-change-type')
        };

        function setActiveMode(mode) {
          currentMode = mode;
          for (let key in modeButtons) {
            modeButtons[key].classList.remove('active');
          }
          modeButtons[mode].classList.add('active');
        }

        modeButtons['increase-altitude'].addEventListener('click', () => {
          setActiveMode('increase-altitude');
        });

        modeButtons['decrease-altitude'].addEventListener('click', () => {
          setActiveMode('decrease-altitude');
        });

        modeButtons['change-type'].addEventListener('click', () => {
          setActiveMode('change-type');
        });

        function renderGrid() {
          gridElement.innerHTML = '';
          grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              const cellElement = document.createElement('div');
              cellElement.className = `cell ${cell.type}`;
              cellElement.innerHTML = cell.altitude;
              cellElement.dataset.row = rowIndex;
              cellElement.dataset.col = colIndex;
              cellElement.addEventListener('click', () => handleCellClick(rowIndex, colIndex));
              gridElement.appendChild(cellElement);
            });
          });
        }

        function handleCellClick(rowIndex, colIndex) {
          const cell = grid[rowIndex][colIndex];
          if (currentMode === 'change-type') {
            toggleCellType(rowIndex, colIndex);
          } else if (currentMode === 'increase-altitude') {
            cell.altitude += 1;
          } else if (currentMode === 'decrease-altitude') {
            cell.altitude = Math.max(0, cell.altitude - 1);
          }
          renderGrid();
          renderModifiedCells();
        }

        function toggleCellType(rowIndex, colIndex) {
          const cell = grid[rowIndex][colIndex];
          if (cell.type === 'empty') {
            cell.type = 'wall';
          } else if (cell.type === 'wall') {
            cell.type = 'endpoint';
          } else if (cell.type === 'endpoint') {
            cell.type = 'empty';
            cell.altitude = 0; // Reset altitude if it becomes empty
          }
        }

        function renderModifiedCells() {
          modifiedCellsElement.innerHTML = '';
          grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              if (cell.type !== 'empty' || cell.altitude !== 0) {
                const listItem = document.createElement('li');
                listItem.textContent = `Position: [${rowIndex}, ${colIndex}] | Type: ${cell.type} | Altitude: ${cell.altitude}`;
                modifiedCellsElement.appendChild(listItem);
              }
            });
          });
        }

        function followPathAndColor() {
          let currentRow = 0;
          let currentCol = 0;

          path.forEach(direction => {
            

            // Ensure we stay within grid bounds
            if (currentRow >= 0 && currentRow < grid.length && currentCol >= 0 && currentCol < grid[0].length) {
              const cellElement = document.querySelector(`[data-row='${currentRow}'][data-col='${currentCol}']`);
              if (cellElement) {
                cellElement.style.backgroundColor = 'red';
              }
            }
            const [dRow, dCol] = direction;
            currentRow += dRow;
            currentCol += dCol;
          });
        }

        function solve() {
          const data = [];
          grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              if (cell.type === 'empty' && cell.altitude === 0) {
                return;
              }
              if (cell.type !== 'empty') {
                data.push({
                  typeOrAlt: "type",
                  value: cell.type,
                  x: rowIndex,
                  y: colIndex
                });
              }
              if (cell.altitude !== 0) {
                data.push({
                  typeOrAlt: "altitude",
                  value: cell.altitude,
                  x: rowIndex,
                  y: colIndex
                });
              }
            });
          });
          redirectToPost('/graph', { points: data });
        }

        document.getElementById('submit').addEventListener('click', solve);
        setActiveMode(currentMode);
        renderGrid();
        followPathAndColor();
      });
    </script>
  </body>
</html>
